@startuml class diagram
'https://plantuml.com/class-diagram

class VendingMachine{
    -_dmDrinkManager
    -_mmMoneyManager
    -void __init__(self, dm, mm)
    +void start_vending_machine()
    +void print_invalid_coin_error_message(self)
    +void print_not_enough_money_to_buy_drink_error_message(self, dDrink)
    +void print_invalid_drink_id_error_mesaage(self)
    +void print_initial_message(self)
    +void print_drink_payment(self, sDrinkName)
    +void print_change_money(self, iChangeMoney)
}

class MoneyManager{
    -_iChangeMoney : Integer
    -_iCustomerMoney : Integer
    - void __init__(self, sMoneyJsonPath)
    +_iChangeMoney iChangeMoney(self)
    +void iChangeMoney(self, x)
    +_iCustomerMoney iCustomerMoney(self)
    +void iCustomerMoney(self, x)
    +void record_money(self, sJsonData, sJsonFilePath)
}

class DrinkManager{
    -_dDrinks [id, drink] : dictionary [1..*] of
    -void __init__(self, sDrinksJsonFilePath)
    +_dDrinks dDrinks(self)
    +void add_drink_data(self, dDrink)
    +lAvailableProducts get_available_products(self)
    +void record_object_data(self, sJsonData, sJsonFilePath)
}

class Product{
    -_iUid : Integer
    -_sName : String
    -_iPrice : Integer
    -_iQuantity : Integer
    -void __init__(self, iUid, sName, iPrice, iQuantity)
    +_iUid iUid(self)
    +_sName sName(self)
    +_iPrice iPrice(self)
    +_iQuantity iQuantity(self)
    +void iQuantity(self, x)
}

class Drink{}

class Consts{
    CURRENCY_TYPE : String
    COINS_LIST : List
}

abstract class ProductManager{
    lAvailableProducts get_available_products(self)
    void record_object_data(self, sJsonObjectData, sJsonFilePath)
}

ProductManager <|-- DrinkManager
Product <|-- Drink
VendingMachine "1" *-- "1" DrinkManager : have >
VendingMachine "1" *-- "1" MoneyManager : have >
DrinkManager "1" *-- "many" Drink :have >
(Drink, DrinkManager) . Bug

@enduml